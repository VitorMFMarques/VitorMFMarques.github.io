{"version":3,"sources":["universe.jpg","App.js","reportWebVitals.js","index.js"],"names":["timerJob","undefined","timerRunning","roundTotalTimer","roundTimer","App","useState","timerIsRunning","setTimerRunning","round","setRound","bonusRound","setBonusRound","timer","setTimer","timerPercentage","setTimerPercentage","updateTimer","nextRound","className","src","universe","alt","Grid","container","spacing","item","xs","Fab","aria-label","size","onClick","disabled","Typography","variant","component","CircularProgress","value","gutterBottom","clearInterval","setInterval","parseInt","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Chip","icon","label","color","DialogActions","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f534388.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/universe.419e0fc7.jpg\";","import {React, useState} from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Chip from '@material-ui/core/Chip';\nimport universe from \"./universe.jpg\";\n\nlet timerJob = undefined;\nlet timerRunning = false;\nlet roundTotalTimer = 30;\nlet roundTimer = 30;\n\nfunction App() {\n\n  \n  const [timerIsRunning, setTimerRunning] = useState(false);\n  const [round, setRound] = useState(1);\n  const [bonusRound, setBonusRound] = useState(false);\n  const [timer, setTimer] = useState(30);\n  const [timerPercentage, setTimerPercentage] = useState(100);\n\n  const incrementRound = () => {\n    if(!timerRunning && round < 12){\n      setRound(round + 1);\n      updateTimer(round + 1);\n    }\n  }\n\n  const decrementRound = () => {\n    if(!timerRunning && round > 1){\n      setRound(round - 1);\n      updateTimer(round - 1);\n    }\n  }\n\n  const updateTimer = (nextRound) => {\n    roundTotalTimer = 30;\n    if(nextRound > 4){\n      roundTotalTimer = 40;\n    }\n    if(nextRound > 8){\n      roundTotalTimer = 50;\n    }\n    roundTimer = roundTotalTimer;\n    setTimer(roundTotalTimer);\n    setTimerPercentage(100);\n  }\n\n  const onTimerStart = () => {\n    if(typeof timerJob !== \"undefined\"){\n      clearInterval(timerJob);\n    }\n    timerJob = setInterval(() => {\n      if(roundTimer - 1 >= 0){\n        roundTimer -= 1;\n        setTimer(roundTimer);\n        setTimerPercentage(parseInt((roundTimer / roundTotalTimer) * 100));\n      } else {\n        clearInterval(timerJob);\n        timerRunning = false;\n        setTimerRunning(timerRunning);\n        updateTimer(round);\n      }\n    }, 1000);\n    timerRunning = true;\n    setTimerRunning(timerRunning);\n  }\n\n  const restartTimer = () => {\n    if(typeof timerJob !== \"undefined\"){\n      clearInterval(timerJob);\n    }\n    timerRunning = false;\n    setTimerRunning(timerRunning);\n    updateTimer(round);\n  }\n\n  const useJoker = () => {\n    if(typeof timerJob !== \"undefined\"){\n      clearInterval(timerJob);\n    }\n    timerRunning = false;\n    setTimerRunning(timerRunning);\n    roundTotalTimer += 15;\n    roundTimer += 15;\n    setTimer(roundTimer);\n    setTimerPercentage(parseInt((roundTimer / roundTotalTimer) * 100));\n  }\n\n  return (\n    <div className=\"App\" >\n      <img src={universe} className=\"Background\" alt=\"\" />\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={3} className=\"RoundContainer\">\n              <Grid item xs={4} className=\"PrevRoundContainer\">\n                <Fab className=\"RoundButton\" aria-label=\"delete\" size=\"small\" onClick={decrementRound} disabled={timerIsRunning}>\n                  <ArrowBackIcon className=\"ButtonIcon\"/>\n                </Fab>\n              </Grid>\n              <Grid item xs={4}>\n              <Typography className=\"RoundLabel\" variant=\"h4\" component=\"h4\">\n                Ronda {round}\n              </Typography>\n              </Grid>\n              <Grid item xs={4} className=\"NextRoundContainer\">\n                <Fab className=\"RoundButton\" aria-label=\"delete\" size=\"small\" onClick={incrementRound} disabled={timerIsRunning}>\n                  <ArrowForwardIcon className=\"ButtonIcon\"/>\n                </Fab>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className=\"TimerContainer\">\n            <CircularProgress variant=\"determinate\" value={timerPercentage} className=\"TimerProgress\"/>\n            <Typography className=\"TimerLabel\" variant=\"h3\" component=\"h3\" gutterBottom>\n                {timer}\n              </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"TimerActionsContainer\">\n                <Fab aria-label=\"delete\" size=\"small\" className=\"TimeButton\" onClick={onTimerStart}>\n                  <PlayArrowIcon className=\"ButtonIcon\"/>\n                </Fab>\n                <Fab aria-label=\"delete\" size=\"small\" className=\"TimeButton\" onClick={restartTimer}>\n                  <RestoreIcon className=\"ButtonIcon\"/>\n                </Fab>\n          </Grid>\n          <Grid item xs={12} className=\"TimerActionsContainer\">\n            <Fab variant=\"extended\" className=\"JokerButton\" onClick={useJoker}>\n              <div className=\"JokerTop\"></div>\n              JOKER\n              <div className=\"JokerBottom\"></div>\n            </Fab>\n          </Grid>\n          <Grid item xs={12} className=\"BonusRoundContainer\">\n            <Fab variant=\"extended\" className=\"BonusRoundButton\" onClick={() => setBonusRound(true)} disabled={true}>\n              Ronda Bónus\n            </Fab>\n          </Grid>\n        </Grid>\n        <Dialog\n          open={bonusRound}\n          onClose={() => setBonusRound(false)}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n                Ronda Bónus\n          </DialogTitle>\n          <DialogContent className=\"BonusRoundContent\">\n            <Grid container spacing={3}>\n              <Grid item xs={12} className=\"BonusRoundLabels\">\n                <Chip\n                  className=\"BonusCorrectAnswers\"\n                  icon={<CheckIcon className=\"BonusCorrectAnswersChip\" />}\n                  label=\"3\"\n                />\n                 <Fab variant=\"extended\" className=\"JokersWinned\" disabled>\n                    <span className=\"JokersWinnedCounter\">3</span> JOKER's\n                  </Fab>\n              </Grid>\n              <Grid item xs={12} className=\"BonusTimerContainer\">\n                <CircularProgress variant=\"determinate\" value={80} className=\"BonusRoundTimerProgress\"/>\n                <Typography className=\"BonusRoundTimerLabel\" variant=\"h3\" component=\"h3\" gutterBottom>\n                  60:00\n                </Typography>\n              </Grid>\n              <Grid item xs={12} className=\"TimerActionsContainer\">\n                <Fab aria-label=\"delete\" size=\"small\" className=\"TimeButton\" color=\"primary\">\n                  <PlayArrowIcon/>\n                </Fab>\n              </Grid>\n              <Grid item xs={12} className=\"BonusTimerActionsContainer\">\n                <Fab variant=\"extended\" className=\"BonusTimerCorrectButton\">\n                  <CheckIcon className=\"BonusTimerCorrectButtonIcon\"/>\n                  Correto\n                </Fab>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setBonusRound(false)} color=\"primary\">\n              Concluido\n            </Button>\n          </DialogActions>\n        </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}